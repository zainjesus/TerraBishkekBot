from config import bot
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from google_sheets.sheets import GoogleSheet
from keyboard.inline import reg_ik
from keyboard.reply import gender_kb
import datetime
import pyqrcode as qr
from database.stats_db import insert_user, get_all_users

router = Router()


class Registraion(StatesGroup):
    name = State()
    gender = State()
    age = State()
    number = State()
    niche = State()


@router.callback_query(F.data.startswith('reg'))
async def reg(call: CallbackQuery, state: FSMContext):
    gs = GoogleSheet()
    
    sheet = gs.service.spreadsheets()
    result = sheet.values().get(spreadsheetId=GoogleSheet.SPREADSHEET_ID, range='–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ!A:G').execute()  
    data = result.get('values', [])


    usernames = [row[1] for row in data] 

    if call.from_user.username is None:
        await bot.send_message(call.from_user.id, '–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, —É –≤–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–¥–∞–Ω–æ'
                                ' "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" –≤ —Ç–µ–ª–µ–≥—Ä–∞–º! –ó–∞–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"'
                                ' –∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–µ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è".')
    else:
        if f'@{call.from_user.username}' in usernames:
            indexes = [i for i, username in enumerate(usernames) if username == f'@{call.from_user.username}']
            index = indexes[-1]
            user_data = data[index]  

            await bot.send_message(call.message.chat.id, f'–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n'
                                                        f'–ò–º—è: {user_data[0]}\n'
                                                        f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data[4]}\n'
                                                        f'–ù–∏—à–∞: {user_data[5]}\n\n'
                                                        '–í—Å–µ –≤–µ—Ä–Ω–æ?', reply_markup=reg_ik)  
        else:
            await state.set_state(Registraion.name)
            await bot.send_message(call.message.chat.id, '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤—Å–µ–≥–æ –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞')
            await bot.send_message(call.message.chat.id, '1Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é –∏ –ò–º—è (–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω)')


@router.callback_query(F.data.startswith('reapet_reg'))
async def reapet_reg(call: CallbackQuery, state: FSMContext):
    await state.set_state(Registraion.name)
    await bot.send_message(call.message.chat.id, '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤—Å–µ–≥–æ –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤')
    await bot.send_message(call.message.chat.id, '1Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é –∏ –ò–º—è (–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω)')


@router.callback_query(F.data.startswith('cancel_reg'))
async def cancel_reg(call: CallbackQuery, state: FSMContext):
    await bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –ñ–¥–µ–º –≤–∞—Å ü§ó")
    qr_code = qr.create(f'@{call.from_user.username}')
    qr_code.png('code.png', scale=6)
    photo = FSInputFile('code.png')
    await bot.send_photo(call.from_user.id, photo, caption='–í–∞—à QR:')


@router.message(Registraion.name)
async def name_save(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await bot.send_message(message.from_user.id, '2Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª', reply_markup=gender_kb)
    await state.set_state(Registraion.gender)


@router.message(Registraion.gender)
async def name_save(message: Message, state: FSMContext):
    if message.text.lower() not in ['–º—É–∂—Å–∫–æ–π', '–∂–µ–Ω—Å–∫–∏–π']:
            await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª!")
    else:  
        await state.update_data(gender=message.text)
        await bot.send_message(message.from_user.id, '3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç', reply_markup=ReplyKeyboardRemove())
        await state.set_state(Registraion.age)


@router.message(Registraion.age)
async def name_save(message: Message, state: FSMContext):
    if len(message.text) > 4 or message.text.isalpha():
        await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç!")
    else:
        await state.update_data(age=message.text)
        await bot.send_message(message.from_user.id, '4Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ü—Ä–∏–º–µ—Ä: +966555555555)')
        await state.set_state(Registraion.number)

    
@router.message(Registraion.number)
async def number_save(message: Message, state: FSMContext):
    if len(message.text) < 9 or message.text.isalpha():
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä')
    else:
        await state.update_data(number=message.text)
        await bot.send_message(message.from_user.id, '5Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –Ω–∏—à—É (–ü—Ä–∏–º–µ—Ä: Wildberries)')
        await state.set_state(Registraion.niche)


@router.message(Registraion.niche)
async def niche_save(message: Message, state: FSMContext):
    await state.update_data(niche=message.text)
    await bot.send_message(message.from_user.id, 'C–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –°–µ–π—á–∞—Å —è –ø—Ä–∏—à–ª—é –≤–∞–º QR-–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏ –≤—Ö–æ–¥–µ.')
    qr_code = qr.create(f'@{message.from_user.username}')
    qr_code.png('code.png', scale=6)
    photo = FSInputFile('code.png')
    await bot.send_photo(message.from_user.id, photo, caption='–í–∞—à QR:')
    await bot.send_message(message.from_user.id, '*–û—Ç–ª–∏—á–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–µ—Ä—Ä—É üöÄ*\n\n'
                        '‚ùóÔ∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –≤ –æ–±—â–µ–º—É —á–∞—Ç—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –¢–∞–º –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ø–æ–≤–æ–¥—É –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –Ω–µ —Ç–æ–ª—å–∫–æ! https://t.me/+U3qFrExcc19mZGMy\n\n'
                        '–ê —Ç–∞–∫–∂–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –æ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–≤!', parse_mode='Markdown')
    
    gs = GoogleSheet()
    data = await state.get_data()
    date = datetime.datetime.now().date()
    current_date = date.strftime("%d.%m.%Y")
    values = [[data.get('name'), f'@{message.from_user.username}', data.get('gender'), data.get('age'),
                data.get('number'), data.get('niche'), '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è',
               current_date]]
    
    sheet = gs.service.spreadsheets()
    result = sheet.values().get(spreadsheetId=GoogleSheet.SPREADSHEET_ID, range='–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ!A:H').execute()
    num_rows = len(result.get('values', []))
    
    range_to_update = f'–ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ!A{num_rows + 1}:H{num_rows + 1}'
    gs.updateRangeValues(range_to_update, values)
    
    last_cell = f'G{num_rows + 1}'
    gs.updateCellBackground(last_cell, "orange")
    await state.clear()

    groups = {
        "insta_official": "insta_official_reg",
        "insta_roman": "insta_roman_reg",
        "insta_nastavniki": "insta_nastavniki_reg",
        "insta_wb": "insta_wb_reg",
        "insta_sm": "insta_sm_reg",
        "insta_shodim": "insta_shodim_reg",
        "insta_repost": "insta_repost_reg",
        "tg_official": "tg_official_reg",
        "tg_chats": "tg_chats_reg",
        "tg_ataliev": "tg_ataliev_reg",
        "site": "site_reg",
        "whatsapp": "whatsapp_reg"
    }

    for group, reg_table in groups.items():
        users = await get_all_users(group)
        if message.from_user.id in users:
            await insert_user(reg_table, message.from_user.id)

